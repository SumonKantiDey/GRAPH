///prob uva 10608 - Friends
///ref http://www.shafaetsplanet.com/planetcoding/?p=763
///ref http://pastebin.com/jrfRqwaG
#include<bits/stdc++.h>
using namespace std;

int par[500005];
int arr[500000],mx=0,mp[500000] ;
struct side
{
    int from,to;
} ;
int findset(int r)
{
    if(par[r] == r) {
        //cout<<"r==="<<r<<endl;
            return r;
    }
    return par[r] = findset(par[r]);
}
void setunion(int a, int b)
{
    int u = findset(a);
    int v = findset(b);
    if(u != v)
    par[u] = v;
}
int main()
{
    side get;
    int u,v,n,a,b,m,i,j;
    vector<side> vec;
   int tc;
   cin>>tc;
   while(tc--){
        mx=0;
    memset(arr,0,sizeof(arr));
    memset(mp,0,sizeof(mp));
    scanf(" %d %d",&m,&n);
    for(i = 1; i <= m; i++)
    {
        par[i] = i;
    }

    for(i = 0; i < n; i++)
    {
        scanf("%d %d",&a,&b);
        get.from =  a;
        get.to   =  b;
        vec.push_back(get);
    }
    for(i = 0; i < n; i++)
    {
        u = vec[i].from;
        v = vec[i].to;
        setunion(u,v);
    }


    for(i = 1; i <= m; i++){
    mx = max(mx,mp[findset(i)]++);///count maximum number include in one set
    }
     cout<<mx+1<<endl;
     mx=0;
     vec.clear();
 }
    return 0;
}


//src http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/
//src http://www.shafaetsplanet.com/planetcoding/?p=604
//Undirected graph
#include<bits/stdc++.h>
using namespace std;
vector<int>adj[100];
int visited[100] = {0};
int level[100];
int parent[100];
void addEdge(int u,int w)
{
    adj[u].push_back(w);
    adj[w].push_back(u);
}
void bfs(int s,int n)
{
    cout<<"Queue value is : ";
    memset(visited,0,sizeof(0));
    queue<int>Q;
    Q.push(s);
    visited[s] = 1;
    level[s] = 0;
    while(!Q.empty())
    {
        int u = Q.front();
        cout<<u<<" ";
        for(int i=0; i<adj[u].size(); i++)
        {
            if(visited[adj[u][i]] == 0)
            {
                int v = adj[u][i];
                level[v] = level[u] + 1;
                parent[v] = u;
                visited[v] = 1;
                Q.push(v);
            }
        }
        Q.pop();
    }
    cout<<endl;
    for(int i=1; i<=n; i++)
    {
        printf("%d to %d distance = %d\n",s,i,level[i]);

    }
}
int main()
{
   int N,E,u,v,src,x;
  cout<<"Enter the node and Edges : "<<endl;
  cin>>N>>E;
  for(int i=0; i<E; i++){
    cin>>u>>v;
    addEdge(u,v);
  }
  cout<<"Enter Source Node :";
   cin>>src;
   bfs(src, N);
   for(int j =1 ;j<=E;j++)
   {
    int size=adj[j].size();
    cout<<"Adjacent Node of "<<j<<" is ";
    for(int i=0; i < size ; i++)
    printf("%d--> ",adj[j][i]);
    printf("\n");
   }
   cout<<"*** DETIRMINE PATH****"<<endl;
   cout<<"From : ";
   cin>>x;
   cout<<"Determine Path From "<<x<<" To source "<<endl;
    cout<<x<<"--->";
   while(x!=src)
   {
       cout<<parent[x]<<"--->";//This is actually parents of x till source
       x = parent[x];
   }
 return 0;
}
/**
output:
Enter the node and Edges :
8 9
1 2
1 3
2 4
2 5
3 5
3 6
4 8
5 7
5 8
Enter Source Node :1
Queue value is : 1 2 3 4 5 6 8 7
1 to 1 distance = 0
1 to 2 distance = 1
1 to 3 distance = 1
1 to 4 distance = 2
1 to 5 distance = 2
1 to 6 distance = 2
1 to 7 distance = 3
1 to 8 distance = 3
Adjacent Node of 1 is 2--> 3-->
Adjacent Node of 2 is 1--> 4--> 5-->
Adjacent Node of 3 is 1--> 5--> 6-->
Adjacent Node of 4 is 2--> 8-->
Adjacent Node of 5 is 2--> 3--> 7--> 8-->
Adjacent Node of 6 is 3-->
Adjacent Node of 7 is 5-->
Adjacent Node of 8 is 4--> 5-->
Adjacent Node of 9 is
*** DETIRMINE PATH****
From : 8
Determine Path From 8 To source
8--->4--->2--->1--->
//*

//ref file:http://zobayer.blogspot.com/2009/12/dijkstras-algorithm-in-c.html
//ref https://www.youtube.com/watch?v=lAXZGERcDf4
//ref https://www.youtube.com/watch?v=c-wqHcYWZj4
#include<bits/stdc++.h>
using namespace std;

typedef pair< int, int > pii;
const int MAX = 1024;
const int INF = 0x3f3f3f3f;
vector< pii > G[MAX];
int d[MAX];
int parent[MAX] ;
void path(int parent[],int j)
 {
    // cout<<"j====="<<j<<"    "<<parent[j]<<endl;
     if(parent[j] == -1)return ;
     path(parent,parent[j]);
     cout<<j<<" ";
 }
void dijkstra(int start) {
int u, v, i, c, w;
priority_queue< pii, vector< pii >, greater< pii > > Q;
memset(d, 0x3f, sizeof d);
memset(parent, -1, sizeof (parent));
Q.push(pii(0, start));///(weight,start) send
d[start] = 0;
parent[start] = 0;
while(!Q.empty()) {
    u = Q.top().second; // node
    c = Q.top().first; // node cost so far
    Q.pop(); // remove the top item.

    if(d[u] < c) continue;
    for(i = 0; i < G[u].size(); i++) {
        v = G[u][i].first; // node
        w = G[u][i].second; // edge weight
        if(d[v] > d[u] + w) {
            d[v] = d[u] + w;
            parent[v]=u;
            Q.push(pii(d[v], v));
        }
    }
}
}

int main() {
int n, e, i, u, v, w, start;
while(scanf("%d %d", &n, &e) == 2) {
    for(i = 1; i <= n; i++) G[i].clear();
    for(i = 0; i < e; i++) {
        scanf("%d %d %d", &u, &v, &w);
        G[u].push_back(pii(v, w));
        G[v].push_back(pii(u, w)); // only if bi-directional
    }
    cout<<"Enter src node "<<endl;
    scanf("%d", &start);

    dijkstra(start);
    printf("Shortest path from node %d:\n", start);
    for(i = 1; i <= n; i++) {
        if(i == start) continue;
        if(d[i] >= INF) printf("\t to node %d: unreachable\n", i);
        else{
            printf("\t to node %d: %d  ", i, d[i]);
            cout<<"PATH IS: ";
            path(parent,i);
            cout<<endl;
        }
    }
}
return 0;
}
/**
input output:
5 6
1 2 5
1 4 15
1 5 12
2 3 2
3 4 3
4 5 2
Enter src node
1
Shortest path from node 1:
         to node 2: 5  PATH IS: 1 2
         to node 3: 7  PATH IS: 1 2 3
         to node 4: 10  PATH IS: 1 2 3 4
         to node 5: 12  PATH IS: 1 5
5 6
1 2 5
1 4 15
1 5 12
2 3 2
3 4 3
4 5 2
Enter src node
5
Shortest path from node 5:
         to node 1: 12  PATH IS: 5 1
         to node 2: 7  PATH IS: 5 4 3 2
         to node 3: 5  PATH IS: 5 4 3
         to node 4: 2  PATH IS: 5 4
**/

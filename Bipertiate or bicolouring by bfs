/// http://codeforces.com/problemset/problem/687/A
#include<bits/stdc++.h>
using namespace std;
vector<int>adj[100005],col[2];

int colour[100005];
 int N,E,u,v,f;
void addEdge(int u,int w)
{
    adj[u].push_back(w);
    adj[w].push_back(u);
}
int bpt(int src)
{
    queue<int>Q;

    Q.push(src);
    colour[src] = 0;
     f = 0;
    while(!Q.empty())
    {
        int u = Q.front();
        col[colour[u]].push_back(u);
        Q.pop();
        for(int i=0; i<adj[u].size(); i++)
        {
            int v = adj[u][i];
            if(colour[v] == -1)
            {
                colour[v] = colour[u]^1;///set colour bit 0 or 1
                Q.push(v);
            }
            else {
                if(colour[u] == colour[v]){
                   return 1;
                }
            }
        }

    }
        return 0;

}
int main()
{

  scanf("%d%d",&N,&E);
    int src,tmp = 0;
  memset(colour,-1,sizeof(colour));
  for(int i=0; i<E; i++){
    cin>>u>>v;
    addEdge(u,v);
  }
  for(int i = 1; i <= N; i++)
  {
      if(colour[i] == -1){
      if(bpt(i) == 1){
        tmp = 1;
    }
      }
  }
    if(tmp == 1){
        cout<<"-1"<<endl;///means not bipartite
    }
    else///if bipartite divide all this n node divide into two parts as some node not connected
    {   /// that time we can give them any one person between two person

        for(int i = 0; i < 2 ; i++) {
                cout << col[i].size() <<endl;
                for(int v : col[i])
                {
                    cout << v << " ";
                }
                cout << endl;
        }
    }
 return 0;
}

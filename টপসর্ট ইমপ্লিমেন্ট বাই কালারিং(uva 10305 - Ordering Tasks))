// https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1246
///ref http://www.shafaetsplanet.com/planetcoding/?p=973
#include<bits/stdc++.h>
using namespace std;
#define CLR(a) memset(a, 0, sizeof(a))
#define mx 10005
#define white 0
#define gray 1
#define black 2

vector<int>g[mx];
map<string,int>mp;
vector<int>vc;
int colour[mx];
bool cycle;
void dfs_topo(int u)
{
    colour[u] = gray;//node work does not finish
    for(int i=0; i<g[u].size(); i++){
        int v = g[u][i];
        if(colour[v] == white)dfs_topo(v);//node start work
        else if(colour[v] == gray){
            cycle = true;
            return;
        }
    }
    colour[u] = black;//when node work finish
    vc.push_back(u);
}
void dfs(int n)
{
    CLR(colour);
    for(int i=1; i<=n; i++){
        if(cycle == true)return;
        if(colour[i] == white)dfs_topo(i);
    }
}
int main()
{
    int tc,cs=0,n,e,u,v;
    //cin>>tc;
    while( cin>>n>>e){
        if(n==0 and e==0)break;
        for(int i=0; i<e; i++){
            cin>>u>>v;
            g[u].push_back(v);
        }
       // printf("Case %d: ",++cs);
        cycle = false;
        dfs(n);
        reverse(vc.begin(),vc.end());
        //if(cycle){
        //    cout<<"No Topological sort impossible,cycle exist"<<endl;
       // }
        //else {
            //cout<<"Topological sort exist"<<endl;
           // cout<<"Topological sort is: ";
            for(int i=0; i<vc.size(); i++){
                cout<<vc[i]<<" ";
            }
            cout<<endl;
       // }
        vector<int>t[mx];swap(g,t);
        vc.clear();
        mp.clear();
}
return 0;
}
/**
input output:
5 4
1 2
2 3
1 3
1 5
4 1 5 2 3
0 0
here never give a input where never create topological sort
**/
